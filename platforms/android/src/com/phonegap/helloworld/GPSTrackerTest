package com.phonegap.helloworld;

import android.app.AlertDialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.Settings;
import android.util.Log;
import android.webkit.JavascriptInterface;

public class GPSTrackerTest extends Service implements LocationListener {
	private final Context mContext;

	// flag for GPS status
	boolean isGPSEnabled = false;

	// flag for network status
	boolean isNetworkEnabled = false;
	
	// flag for passive status
	boolean isPassiveEnabled = false;
	
	boolean canGetLocation = false;

	Location location; // location
	double latitude; // latitude
	double longitude; // longitude

	// The minimum distance to change Updates in meters
	private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

	// The minimum time between updates in milliseconds
	private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute

	// Declaring a Location Manager
	protected LocationManager locationManager;
	
	public GPSTrackerTest(Context context) {
		this.mContext = context;
		getLocation();
	}
	
	/* 캐쉬에 저장된 lastLocation 을 불러오는 method
	 * 1. Criteria 클래스를 이용해서 best Provider을 구한다
	 * 2. bsetProvier로 저장된 위치가 없을 경우 Networ_provider로 불러온다
	*/
	@JavascriptInterface
	public void getLastLocation(){
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE); 
		String bsetProvier = locationManager.getBestProvider(criteria, true);
		   if (bsetProvier != null) {
               location = locationManager.getLastKnownLocation(bsetProvier);
               if (location != null) {
                   latitude = location.getLatitude();
                   longitude = location.getLongitude();
               }else{
            	   location = locationManager
                           .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
            	   if (location != null) {
                       latitude = location.getLatitude();
                       longitude = location.getLongitude();
            	   }
               }
           }
	}
	
	/*
	 *  wifi 기반의 passvie location 을 얻어오는 메소드
	 *  
	 * */
	@JavascriptInterface
	public void getPassiveLocation(){
		if(isPassiveEnabled){
			locationManager.requestLocationUpdates( LocationManager.PASSIVE_PROVIDER, 0, 0, this);
            if(locationManager != null){
            	location = locationManager
                        .getLastKnownLocation(LocationManager.PASSIVE_PROVIDER);
            	if(location != null){
            		 latitude = location.getLatitude();
                     longitude = location.getLongitude();
                    Log.d("Passive Provider", "------------------------------------------------------------------- ");
                    Log.d("Passive Provider", "passive provider 가 작동중입니다. " );
                    Log.d("Passive Provider", "passive provider info : " + LocationManager.PASSIVE_PROVIDER );
            		Log.d("Passive Provider", "passive provider 위치정보 : " + latitude + " : " + longitude );
            		Log.d("Passive Provider", "------------------------------------------------------------------- ");
            	}
            }
		}
	}
	
	
	/*
	 *  Network 기반의 Network location 을 얻어오는 메소드
	 *  
	 * */
	@JavascriptInterface
	public void getNetworkLocation(){
	  if(locationManager != null){
        	location = locationManager
                    .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
        	if(location != null){
        		 latitude = location.getLatitude();
                 longitude = location.getLongitude();
     			Log.d("NETWORK Provider", "------------------------------------------------------------------- ");
                Log.d("NETWORK Provider", "NETWORK provider 가 작동중입니다. " );
                Log.d("NETWORK Provider", "NETWORK provider info : " + LocationManager.NETWORK_PROVIDER );
        		Log.d("NETWORK Provider", "NETWORK provider 위치정보 : " + latitude + " : " + longitude );
        		Log.d("NETWORK Provider", "------------------------------------------------------------------- ");
        	}
        }
	}
	/*
	 *  GPS 기반의 GPS location 을 얻어오는 메소드
	 *  
	 * */
	@JavascriptInterface
	public void getGpsLocation(){
	  if(locationManager != null){
        	location = locationManager
                    .getLastKnownLocation(LocationManager.GPS_PROVIDER);
        	if(location != null){
        		 latitude = location.getLatitude();
                 longitude = location.getLongitude();
     			Log.d("GPS Provider", "------------------------------------------------------------------- ");
                Log.d("GPS Provider", "GPS provider 가 작동중입니다. " );
                Log.d("GPS Provider", "GPS provider info : " + LocationManager.GPS_PROVIDER );
        		Log.d("GPS Provider", "GPS provider 위치정보 : " + latitude + " : " + longitude );
        		Log.d("GPS Provider", "------------------------------------------------------------------- ");
        	}
        }
	}
	
	@JavascriptInterface
	  public Location getLocation() {
	        try {
	            locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);
	            
	            // getting GPS status
	            isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
	 
	            // getting network status
	            isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
	            
	            //getting passive status
	            isPassiveEnabled = locationManager.isProviderEnabled(LocationManager.PASSIVE_PROVIDER);
	            
	            if (!isGPSEnabled && !isNetworkEnabled) {
	                // no network provider is enabled
	            } else {
	                this.canGetLocation = true;
	                // First get location from Network Provider
	                if (isNetworkEnabled) {
	                    locationManager.requestLocationUpdates(
	                            LocationManager.NETWORK_PROVIDER,
	                            MIN_TIME_BW_UPDATES,
	                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
	                    Log.d("Network", "Network update start");
	                }else{
	                	showSettingsAlert();
	                }
	                // if GPS Enabled get lat/long using GPS Services
	                if (isGPSEnabled) {
	                    if (location == null) {
	                        locationManager.requestLocationUpdates(
	                                LocationManager.GPS_PROVIDER,
	                                MIN_TIME_BW_UPDATES,
	                                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
	                        Log.d("GPS", "GPS Enabled update start");
	                    }
	                }
	            }
	 
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	 
	        return location;
	    }
	  
	  /**
	     * Stop using GPS listener
	     * Calling this function will stop using GPS in your app
	     * */
		@JavascriptInterface
	    public void stopUsingGPS(){
	        if(locationManager != null){
	            locationManager.removeUpdates(GPSTrackerTest.this);
	        }       
	    }
	     
	    /**
	     * Function to get latitude
	     * */
	    @JavascriptInterface
	    public double getLatitude(){
	        return this.latitude;
	    }
	     
	    /**
	     * Function to get longitude
	     * */
		@JavascriptInterface
	    public double getLongitude(){
	        return this.longitude;
	    }
	     
	    /**
	     * Function to check GPS/wifi enabled
	     * @return boolean
	     * */
	    public boolean canGetLocation() {
	        return this.canGetLocation;
	    }
	     
	    /**
	     * Function to show settings alert dialog
	     * On pressing Settings button will lauch Settings Options
	     * */
	    public void showSettingsAlert(){
	        AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);
	      
	        // Setting Dialog Title
	        alertDialog.setTitle("GPS is settings");
	  
	        // Setting Dialog Message
	        alertDialog.setMessage("GPS is not enabled. Do you want to go to settings menu?");
	  
	        // On pressing Settings button
	        alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {
	            public void onClick(DialogInterface dialog,int which) {
	                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
	                mContext.startActivity(intent);
	            }
	        });
	  
	        // on pressing cancel button
	        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
	            public void onClick(DialogInterface dialog, int which) {
	            dialog.cancel();
	            }
	        });
	  
	        // Showing Alert Message
	        alertDialog.show();
	    } 
	  
	@Override
	public void onLocationChanged(Location location) {
		
	}
	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void onProviderDisabled(String provider) {
		
	}
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	
}
